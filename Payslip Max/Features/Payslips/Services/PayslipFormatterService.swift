import Foundation

/// Service for formatting payslip data for display and sharing
@MainActor 
class PayslipFormatterService {
    // MARK: - Singleton Instance
    static let shared = PayslipFormatterService()
    
    // MARK: - Formatting Methods
    
    /// Formats a value as a currency string.
    ///
    /// - Parameter value: The value to format.
    /// - Returns: A formatted currency string.
    func formatCurrency(_ value: Double?) -> String {
        guard let value = value else { return "₹0" }
        
        let formatter = NumberFormatter()
        formatter.numberStyle = .currency
        formatter.currencySymbol = "₹"
        formatter.minimumFractionDigits = 0
        formatter.maximumFractionDigits = 0
        formatter.usesGroupingSeparator = true
        
        if let formattedValue = formatter.string(from: NSNumber(value: value)) {
            return formattedValue
        }
        
        return "₹\(Int(value))"
    }
    
    /// Formats a year value without group separators
    func formatYear(_ year: Int) -> String {
        return "\(year)" // Simple string conversion without formatting
    }
    
    /// Gets a formatter for currency values
    func getCurrencyFormatter() -> NumberFormatter {
        let formatter = NumberFormatter()
        formatter.numberStyle = .currency
        formatter.currencySymbol = "₹"
        formatter.minimumFractionDigits = 0
        formatter.maximumFractionDigits = 0
        formatter.usesGroupingSeparator = true
        return formatter
    }
    
    /// Gets a formatted string representation of the payslip for sharing.
    ///
    /// - Returns: A formatted string with payslip details.
    func getShareText(for payslipData: Models.PayslipData) -> String {
        // Create a formatted description from PayslipData
        let formatter = getCurrencyFormatter()
        
        let creditsStr = formatter.string(from: NSNumber(value: payslipData.totalCredits)) ?? "\(payslipData.totalCredits)"
        let debitsStr = formatter.string(from: NSNumber(value: payslipData.totalDebits)) ?? "\(payslipData.totalDebits)"
        let dsopStr = formatter.string(from: NSNumber(value: payslipData.dsop)) ?? "\(payslipData.dsop)"
        let taxStr = formatter.string(from: NSNumber(value: payslipData.incomeTax)) ?? "\(payslipData.incomeTax)"
        let netStr = formatter.string(from: NSNumber(value: payslipData.netRemittance)) ?? "\(payslipData.netRemittance)"
        
        var description = """
        PAYSLIP DETAILS
        ---------------
        
        PERSONAL DETAILS:
        Name: \(payslipData.name)
        Month: \(payslipData.month)
        Year: \(payslipData.year)
        
        FINANCIAL DETAILS:
        Credits: \(creditsStr)
        Debits: \(debitsStr)
        DSOP: \(dsopStr)
        Tax: \(taxStr)
        Net Amount: \(netStr)
        """
        
        // Add earnings breakdown if available
        if !payslipData.allEarnings.isEmpty {
            description += "\n\nEARNINGS BREAKDOWN:"
            for (key, value) in payslipData.allEarnings.sorted(by: { $0.key < $1.key }) {
                if value > 0 {
                    let valueStr = formatter.string(from: NSNumber(value: value)) ?? "\(value)"
                    description += "\n\(key): \(valueStr)"
                }
            }
        }
        
        // Add deductions breakdown if available
        if !payslipData.allDeductions.isEmpty {
            description += "\n\nDEDUCTIONS BREAKDOWN:"
            for (key, value) in payslipData.allDeductions.sorted(by: { $0.key < $1.key }) {
                if value > 0 {
                    let valueStr = formatter.string(from: NSNumber(value: value)) ?? "\(value)"
                    description += "\n\(key): \(valueStr)"
                }
            }
        }
        
        description += "\n\nGenerated by Payslip Max"
        
        return description
    }
} 