---
description: 
globs: 
alwaysApply: true
---

# Comprehensive Cursor Rules for PayslipMax Excellence

## Code Organization

1. **File Structure**
   - Maximum 300 lines per file
   - One class/struct/enum per file
   - Group related files in dedicated folders (e.g., `/Parsers/Military/`)

2. **Function Size**
   - Maximum 30 lines per function
   - Single responsibility per function
   - Descriptive naming that explains purpose (e.g., `extractNameFromHeader()`)

3. **Architecture Pattern**
   - MVVM for all screens
   - Use Composition over Inheritance
   - Clear boundaries between layers (View → ViewModel → Service → Repository)

## PDF Processing

1. **Parser Registry System**
   - Central registry of parsers with metadata
   - Automatic format detection
   - Parser confidence scores (0.0-1.0)

2. **Incremental Parsing Pipeline**
   - Step 1: Text extraction and cleaning
   - Step 2: Format identification
   - Step 3: Structure detection
   - Step 4: Data extraction
   - Step 5: Validation and correction

3. **Error Handling**
   - Use `Result<Success, Failure>` for all parsing operations
   - Detailed error types with recovery suggestions
   - Telemetry collection for parsing failures

4. **Performance Metrics**
   - Measure parsing time per document
   - Track memory usage during parsing
   - Report success/failure rates per parser

5. **Data Extraction Strategy**
   - Region-based extraction for structured sections
   - NLP-assisted extraction for unstructured text
   - OCR fallback for image-based PDFs

## Dependency Management

1. **Injection Pattern**
   - Use protocol-based dependency injection
   - Factory pattern for complex object creation
   - No direct access to singletons from business logic

2. **Service Lifecycle**
   - Clear initialization and teardown procedures
   - Resource cleanup on service destruction
   - Memory leak detection in debug mode

## Testing

1. **Coverage Requirements**
   - 90%+ test coverage for parsers
   - Integration tests for full parsing pipeline
   - UI tests for critical user journeys

2. **Test Data**
   - Maintain anonymized test payslips for all formats
   - Version control test documents
   - Document expected parse results

## HomeView Refactoring

1. **Component Extraction**
   - Extract each UI section to its own View struct
   - Use ViewBuilders for composition
   - Implement container views for layout

2. **State Management**
   - Use published properties for reactive updates
   - Separate state objects for complex workflows
   - Document state transitions

## PDF Enhancement Rules

1. **Parser Evolution**
   - Each parser must maintain backward compatibility
   - Versioned parser implementations
   - A/B testing framework for parser improvements

2. **ML Integration**
   - Training pipeline for format recognition
   - Continuous learning from corrections
   - Confidence scoring for extracted data

3. **Offline Capabilities**
   - Queue processing tasks when offline
   - Resume processing on connectivity restoration
   - Local storage with encryption

4. **Multi-format Support**
   - Clear identification of supported formats
   - Format-specific extractors
   - Format conversion capabilities

5. **Data Extraction Precision**
   - Field-specific extraction strategies
   - Contextual awareness (nearby fields)
   - Fuzzy matching for imprecise data

## Code Quality

1. **Documentation**
   - Every public API must be documented
   - Include examples in documentation
   - Document parsing rules and exceptions

2. **Logging**
   - Structured logging for all parsing operations
   - Performance benchmarks logged in debug mode
   - User-facing error messages separate from technical logs

3. **Refactoring Pattern**
   - Extract → Test → Refactor → Test
   - No refactoring without tests
   - Progressive enhancement approach

## Version Control

1. **Commit Guidelines**
   - Atomic commits with clear messages
   - Reference issue numbers
   - Label: "REFACTOR:", "FEATURE:", "FIX:", etc.

2. **Branch Strategy**
   - Feature branches for new parsers
   - Integration branches for major refactoring
   - Frequent merges from main

