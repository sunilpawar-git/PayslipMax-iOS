---
description: 
globs: 
alwaysApply: true
---
## SwiftData Synchronization Rules

1. **Context Management**
   - Always process pending changes before and after critical model operations
   - Explicitly save contexts after modifications
   - Use `modelContext.processPendingChanges()` around deletion operations
   - Never assume changes propagate automatically across view lifecycles

2. **Cross-Component Communication**
   - Implement notification system for model change events
   - Use explicit refresh mechanisms in views after model alterations
   - Add small delays (100-500ms) after critical state changes before refreshing views
   - Include "forced refresh" capabilities for handling stubborn synchronization issues

3. **Deletion Protocol**
   - When deleting objects, use multiple deletion mechanisms for redundancy
   - First remove from specific context, then from data service
   - Always refresh dependent views after deletion
   - Verify deletion success through diagnostic logging