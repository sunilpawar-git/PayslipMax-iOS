import XCTest
import SwiftUI
import SwiftData
@testable import PayslipMax

@MainActor
final class InsightsViewModelTests: XCTestCase {
    var sut: InsightsViewModel!
    var mockDataService: MockDataService!
    var mockModelContext: MockModelContext!
    var modelContainer: ModelContainer!
    var testPayslips: [PayslipItem] = []
    
    override func setUp() async throws {
        try await super.setUp()
        
        // Create a model container for testing
        let schema = Schema([PayslipItem.self])
        let modelConfiguration = ModelConfiguration(schema: schema, isStoredInMemoryOnly: true)
        modelContainer = try ModelContainer(for: schema, configurations: [modelConfiguration])
        
        // Initialize mock services
        mockDataService = MockDataService()
        mockModelContext = MockModelContext()
        
        // Create the view model with mock services
        sut = InsightsViewModel(dataService: mockDataService)
        
        // Create test payslips
        let januaryPayslip = PayslipItem(
            id: UUID(),
            month: "January",
            year: 2023,
            credits: 5000,
            debits: 1000,
            dspof: 500,
            tax: 800,
            location: "New York",
            name: "John Doe",
            accountNumber: "1234567890",
            panNumber: "ABCDE1234F"
        )
        
        let februaryPayslip = PayslipItem(
            id: UUID(),
            month: "February",
            year: 2023,
            credits: 5500,
            debits: 1100,
            dspof: 550,
            tax: 880,
            location: "New York",
            name: "John Doe",
            accountNumber: "1234567890",
            panNumber: "ABCDE1234F"
        )
        
        let marchPayslip = PayslipItem(
            id: UUID(),
            month: "March",
            year: 2023,
            credits: 6000,
            debits: 1200,
            dspof: 600,
            tax: 960,
            location: "New York",
            name: "John Doe",
            accountNumber: "1234567890",
            panNumber: "ABCDE1234F"
        )
        
        testPayslips = [januaryPayslip, februaryPayslip, marchPayslip]
        
        // Save payslips to mock data service
        mockDataService.testPayslips = testPayslips
    }
    
    override func tearDown() async throws {
        sut = nil
        mockDataService = nil
        mockModelContext = nil
        testPayslips = []
        try await super.tearDown()
    }
    
    func testInitialization() throws {
        // Then
        XCTAssertEqual(mockDataService.fetchCount, 1)
        XCTAssertEqual(sut.timeframe, .year)
        XCTAssertEqual(sut.selectedYear, Calendar.current.component(.year, from: Date()))
    }
    
    func testCalculateInsights_Year() throws {
        // Given
        sut.timeframe = .year
        sut.selectedYear = 2023
        
        // When
        let insights = sut.calculateInsights(from: testPayslips)
        
        // Then
        XCTAssertEqual(insights.totalCredits, 16500)
        XCTAssertEqual(insights.totalDebits, 3300)
        XCTAssertEqual(insights.totalDSPOF, 1650)
        XCTAssertEqual(insights.totalTax, 2640)
        XCTAssertEqual(insights.netIncome, 16500 - 3300 - 1650 - 2640)
    }
    
    func testCalculateInsights_Month() throws {
        // Given
        sut.timeframe = .month
        sut.selectedYear = 2023
        sut.selectedMonth = "January"
        
        // When
        let insights = sut.calculateInsights(from: testPayslips)
        
        // Then
        XCTAssertEqual(insights.totalCredits, 5000)
        XCTAssertEqual(insights.totalDebits, 1000)
        XCTAssertEqual(insights.totalDSPOF, 500)
        XCTAssertEqual(insights.totalTax, 800)
        XCTAssertEqual(insights.netIncome, 5000 - 1000 - 500 - 800)
    }
    
    func testFilterPayslips_Year() throws {
        // Given
        sut.timeframe = .year
        sut.selectedYear = 2023
        
        // When
        let filtered = sut.filterPayslips(testPayslips)
        
        // Then
        XCTAssertEqual(filtered.count, 3)
    }
    
    func testFilterPayslips_Month() throws {
        // Given
        sut.timeframe = .month
        sut.selectedYear = 2023
        sut.selectedMonth = "January"
        
        // When
        let filtered = sut.filterPayslips(testPayslips)
        
        // Then
        XCTAssertEqual(filtered.count, 1)
        XCTAssertEqual(filtered.first?.month, "January")
    }
    
    func testGetDeductionCategories() throws {
        // Given
        sut.timeframe = .year
        sut.selectedYear = 2023
        
        // When
        let categories = sut.getDeductionCategories(from: testPayslips)
        
        // Then
        XCTAssertEqual(categories.count, 3)
        
        // Check if categories contain the expected deduction types
        let categoryNames = categories.map { $0.name }
        XCTAssertTrue(categoryNames.contains("Debits"))
        XCTAssertTrue(categoryNames.contains("DSPOF"))
        XCTAssertTrue(categoryNames.contains("Tax"))
        
        // Check if the values are correct
        let debitsCategory = categories.first { $0.name == "Debits" }
        XCTAssertEqual(debitsCategory?.value, 3300)
        
        let dspofCategory = categories.first { $0.name == "DSPOF" }
        XCTAssertEqual(dspofCategory?.value, 1650)
        
        let taxCategory = categories.first { $0.name == "Tax" }
        XCTAssertEqual(taxCategory?.value, 2640)
    }
    
    func testGetDeductionColor() throws {
        // Given
        let debitsCategory = DeductionCategory(name: "Debits", value: 3300)
        let dspofCategory = DeductionCategory(name: "DSPOF", value: 1650)
        let taxCategory = DeductionCategory(name: "Tax", value: 2640)
        
        // When & Then
        XCTAssertEqual(sut.getDeductionColor(for: debitsCategory), Color.red)
        XCTAssertEqual(sut.getDeductionColor(for: dspofCategory), Color.orange)
        XCTAssertEqual(sut.getDeductionColor(for: taxCategory), Color.purple)
        XCTAssertEqual(sut.getDeductionColor(for: DeductionCategory(name: "Unknown", value: 100)), Color.gray)
    }
} 