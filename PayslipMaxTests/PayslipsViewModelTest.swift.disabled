import XCTest
@testable import PayslipMax

/// Test for PayslipsViewModel data operations
@MainActor
final class PayslipsViewModelTest: XCTestCase {
    
    var mockDataService: PayslipsViewModelMockDataService!
    var payslipsViewModel: PayslipsViewModel!
    
    override func setUp() {
        super.setUp()
        mockDataService = PayslipsViewModelMockDataService()
        payslipsViewModel = PayslipsViewModel(dataService: mockDataService)
    }
    
    override func tearDown() {
        payslipsViewModel = nil
        mockDataService = nil
        super.tearDown()
    }
    
    func testInitialState() {
        // Test initial state
        XCTAssertFalse(payslipsViewModel.isLoading)
        XCTAssertNil(payslipsViewModel.error)
        XCTAssertEqual(payslipsViewModel.searchText, "")
        XCTAssertEqual(payslipsViewModel.sortOrder, .dateDescending)
        XCTAssertTrue(payslipsViewModel.payslips.isEmpty)
        XCTAssertNil(payslipsViewModel.selectedPayslip)
        XCTAssertFalse(payslipsViewModel.showShareSheet)
        XCTAssertEqual(payslipsViewModel.shareText, "")
        XCTAssertTrue(payslipsViewModel.groupedPayslips.isEmpty)
        XCTAssertTrue(payslipsViewModel.sortedSectionKeys.isEmpty)
    }
    
    func testLoadPayslips() async {
        // Create test payslips as AnyPayslip
        let testPayslips: [AnyPayslip] = [
            PayslipItem(
                month: "January",
                year: 2024,
                credits: 5000.0,
                debits: 1000.0,
                dsop: 300.0,
                tax: 800.0,
                name: "Employee 1",
                accountNumber: "XXXX1234",
                panNumber: "ABCDE1234F"
            ),
            PayslipItem(
                month: "February",
                year: 2024,
                credits: 5200.0,
                debits: 1100.0,
                dsop: 320.0,
                tax: 850.0,
                name: "Employee 2",
                accountNumber: "XXXX5678",
                panNumber: "ABCDE5678G"
            )
        ]
        
        // Set up mock data service
        mockDataService.payslips = testPayslips.map { $0 as! PayslipItem }
        
        // Test load payslips
        await payslipsViewModel.loadPayslips()
        
        // Verify results
        XCTAssertEqual(payslipsViewModel.payslips.count, 2)
        XCTAssertNil(payslipsViewModel.error)
        XCTAssertFalse(payslipsViewModel.isLoading)
    }
    
    func testLoadPayslipsWithError() async {
        // Set up mock data service to fail
        mockDataService.shouldFailFetch = true
        
        // Test load payslips with error
        await payslipsViewModel.loadPayslips()
        
        // Verify error handling
        XCTAssertNotNil(payslipsViewModel.error)
        XCTAssertTrue(payslipsViewModel.payslips.isEmpty)
        XCTAssertFalse(payslipsViewModel.isLoading)
    }
    
    func testSearchFiltering() async {
        // Create test payslips as AnyPayslip
        let testPayslips: [AnyPayslip] = [
            PayslipItem(
                month: "January",
                year: 2024,
                credits: 5000.0,
                debits: 1000.0,
                dsop: 300.0,
                tax: 800.0,
                name: "John Doe",
                accountNumber: "XXXX1234",
                panNumber: "ABCDE1234F"
            ),
            PayslipItem(
                month: "February",
                year: 2024,
                credits: 5200.0,
                debits: 1100.0,
                dsop: 320.0,
                tax: 850.0,
                name: "Jane Smith",
                accountNumber: "XXXX5678",
                panNumber: "ABCDE5678G"
            )
        ]
        
        // Set up mock data service
        mockDataService.payslips = testPayslips.map { $0 as! PayslipItem }
        await payslipsViewModel.loadPayslips()
        
        // Test search by name
        payslipsViewModel.searchText = "John"
        let filteredByName = payslipsViewModel.filteredPayslips
        XCTAssertEqual(filteredByName.count, 1)
        XCTAssertEqual(filteredByName.first?.name, "John Doe")
        
        // Test search by month
        payslipsViewModel.searchText = "February"
        let filteredByMonth = payslipsViewModel.filteredPayslips
        XCTAssertEqual(filteredByMonth.count, 1)
        XCTAssertEqual(filteredByMonth.first?.month, "February")
        
        // Test search by year
        payslipsViewModel.searchText = "2024"
        let filteredByYear = payslipsViewModel.filteredPayslips
        XCTAssertEqual(filteredByYear.count, 2)
        
        // Test clear search
        payslipsViewModel.searchText = ""
        let allPayslips = payslipsViewModel.filteredPayslips
        XCTAssertEqual(allPayslips.count, 2)
    }
    
    func testSortingOrders() async {
        // Create test payslips with different values
        let testPayslips: [AnyPayslip] = [
            PayslipItem(
                month: "January",
                year: 2024,
                credits: 5000.0,
                debits: 1000.0,
                dsop: 300.0,
                tax: 800.0,
                name: "Alice",
                accountNumber: "XXXX1234",
                panNumber: "ABCDE1234F"
            ),
            PayslipItem(
                month: "February",
                year: 2024,
                credits: 6000.0,
                debits: 1200.0,
                dsop: 350.0,
                tax: 900.0,
                name: "Bob",
                accountNumber: "XXXX5678",
                panNumber: "ABCDE5678G"
            ),
            PayslipItem(
                month: "March",
                year: 2024,
                credits: 4500.0,
                debits: 800.0,
                dsop: 250.0,
                tax: 700.0,
                name: "Charlie",
                accountNumber: "XXXX9012",
                panNumber: "ABCDE9012H"
            )
        ]
        
        // Set up mock data service
        mockDataService.payslips = testPayslips.map { $0 as! PayslipItem }
        await payslipsViewModel.loadPayslips()
        
        // Test amount descending sort
        payslipsViewModel.sortOrder = .amountDescending
        let sortedByAmountDesc = payslipsViewModel.filteredPayslips
        XCTAssertEqual(sortedByAmountDesc.first?.credits, 6000.0)
        XCTAssertEqual(sortedByAmountDesc.last?.credits, 4500.0)
        
        // Test amount ascending sort
        payslipsViewModel.sortOrder = .amountAscending
        let sortedByAmountAsc = payslipsViewModel.filteredPayslips
        XCTAssertEqual(sortedByAmountAsc.first?.credits, 4500.0)
        XCTAssertEqual(sortedByAmountAsc.last?.credits, 6000.0)
        
        // Test name ascending sort
        payslipsViewModel.sortOrder = .nameAscending
        let sortedByNameAsc = payslipsViewModel.filteredPayslips
        XCTAssertEqual(sortedByNameAsc.first?.name, "Alice")
        XCTAssertEqual(sortedByNameAsc.last?.name, "Charlie")
        
        // Test name descending sort
        payslipsViewModel.sortOrder = .nameDescending
        let sortedByNameDesc = payslipsViewModel.filteredPayslips
        XCTAssertEqual(sortedByNameDesc.first?.name, "Charlie")
        XCTAssertEqual(sortedByNameDesc.last?.name, "Alice")
    }
    
    func testGroupedPayslips() async {
        // Create test payslips from different months
        let testPayslips: [AnyPayslip] = [
            PayslipItem(
                month: "January",
                year: 2024,
                credits: 5000.0,
                debits: 1000.0,
                dsop: 300.0,
                tax: 800.0,
                name: "Employee 1",
                accountNumber: "XXXX1234",
                panNumber: "ABCDE1234F"
            ),
            PayslipItem(
                month: "January",
                year: 2024,
                credits: 5200.0,
                debits: 1100.0,
                dsop: 320.0,
                tax: 850.0,
                name: "Employee 2",
                accountNumber: "XXXX5678",
                panNumber: "ABCDE5678G"
            ),
            PayslipItem(
                month: "February",
                year: 2024,
                credits: 5100.0,
                debits: 1050.0,
                dsop: 310.0,
                tax: 825.0,
                name: "Employee 3",
                accountNumber: "XXXX9012",
                panNumber: "ABCDE9012H"
            )
        ]
        
        // Set up mock data service
        mockDataService.payslips = testPayslips.map { $0 as! PayslipItem }
        await payslipsViewModel.loadPayslips()
        
        // Test grouped payslips
        let grouped = payslipsViewModel.groupedPayslips
        XCTAssertEqual(grouped.keys.count, 2) // Two different months
        XCTAssertEqual(grouped["January 2024"]?.count, 2)
        XCTAssertEqual(grouped["February 2024"]?.count, 1)
        
        // Test sorted section keys
        let sectionKeys = payslipsViewModel.sortedSectionKeys
        XCTAssertTrue(sectionKeys.contains("January 2024"))
        XCTAssertTrue(sectionKeys.contains("February 2024"))
    }
    
    func testDeletePayslip() async {
        // Create a test payslip
        let testPayslip = PayslipItem(
            month: "January",
            year: 2024,
            credits: 5000.0,
            debits: 1000.0,
            dsop: 300.0,
            tax: 800.0,
            name: "Employee 1",
            accountNumber: "XXXX1234",
            panNumber: "ABCDE1234F"
        )
        
        // Set up mock data service
        mockDataService.payslips = [testPayslip]
        await payslipsViewModel.loadPayslips()
        
        // Verify payslip is loaded
        XCTAssertEqual(payslipsViewModel.payslips.count, 1)
        
        // Delete the payslip
        try? await payslipsViewModel.deletePayslip(testPayslip)
        
        // Verify payslip is deleted from mock
        XCTAssertEqual(mockDataService.payslips.count, 0)
    }
    
    func testDeletePayslipWithError() async {
        // Set up mock data service to fail delete
        mockDataService.shouldFailDelete = true
        
        let testPayslip = PayslipItem(
            month: "January",
            year: 2024,
            credits: 5000.0,
            debits: 1000.0,
            dsop: 300.0,
            tax: 800.0,
            name: "Employee 1",
            accountNumber: "XXXX1234",
            panNumber: "ABCDE1234F"
        )
        
        // Set up mock data service
        mockDataService.payslips = [testPayslip]
        await payslipsViewModel.loadPayslips()
        
        // Try to delete with error
        do {
            try await payslipsViewModel.deletePayslip(testPayslip)
            XCTFail("Expected error was not thrown")
        } catch {
            // Expected error
            XCTAssertTrue(error is AppError)
        }
    }
    
    func testSelectedPayslipAndShare() {
        // Create a test payslip
        let testPayslip: AnyPayslip = PayslipItem(
            month: "January",
            year: 2024,
            credits: 5000.0,
            debits: 1000.0,
            dsop: 300.0,
            tax: 800.0,
            name: "Employee 1",
            accountNumber: "XXXX1234",
            panNumber: "ABCDE1234F"
        )
        
        // Test selection
        payslipsViewModel.selectedPayslip = testPayslip
        XCTAssertNotNil(payslipsViewModel.selectedPayslip)
        XCTAssertEqual(payslipsViewModel.selectedPayslip?.name, "Employee 1")
        
        // Test share functionality
        payslipsViewModel.shareText = "Test share text"
        payslipsViewModel.showShareSheet = true
        XCTAssertTrue(payslipsViewModel.showShareSheet)
        XCTAssertEqual(payslipsViewModel.shareText, "Test share text")
    }
    
    func testHasActiveFilters() {
        // Initially no filters
        XCTAssertFalse(payslipsViewModel.hasActiveFilters)
        
        // Add search text
        payslipsViewModel.searchText = "test"
        XCTAssertTrue(payslipsViewModel.hasActiveFilters)
        
        // Clear search text
        payslipsViewModel.searchText = ""
        XCTAssertFalse(payslipsViewModel.hasActiveFilters)
    }
    
    func testFilteredPayslipsEmptyResults() async {
        // Create test payslips
        let testPayslips: [AnyPayslip] = [
            PayslipItem(
                month: "January",
                year: 2024,
                credits: 5000.0,
                debits: 1000.0,
                dsop: 300.0,
                tax: 800.0,
                name: "John Doe",
                accountNumber: "XXXX1234",
                panNumber: "ABCDE1234F"
            )
        ]
        
        // Set up mock data service
        mockDataService.payslips = testPayslips.map { $0 as! PayslipItem }
        await payslipsViewModel.loadPayslips()
        
        // Search for something that doesn't exist
        payslipsViewModel.searchText = "NonExistent"
        let filtered = payslipsViewModel.filteredPayslips
        XCTAssertEqual(filtered.count, 0)
    }
}

// MARK: - Mock Data Service for PayslipsViewModel

/// Mock data service specifically designed for PayslipsViewModel testing
@MainActor
class PayslipsViewModelMockDataService: DataServiceProtocol {
    var payslips: [PayslipItem] = []
    var shouldFailFetch = false
    var shouldFailSave = false
    var shouldFailDelete = false
    var isInitialized = false
    
    func initialize() async throws {
        isInitialized = true
    }
    
    func fetch<T>(_ type: T.Type) async throws -> [T] where T : Identifiable {
        if shouldFailFetch {
            throw AppError.fetchFailed("Mock fetch error")
        }
        
        if type == PayslipItem.self {
            return payslips as! [T]
        }
        
        return []
    }
    
    func fetchRefreshed<T>(_ type: T.Type) async throws -> [T] where T : Identifiable {
        return try await fetch(type)
    }
    
    func save<T>(_ entity: T) async throws where T : Identifiable {
        if shouldFailSave {
            throw AppError.saveFailed("Mock save error")
        }
        
        if let payslip = entity as? PayslipItem {
            payslips.append(payslip)
        }
    }
    
    func saveBatch<T>(_ entities: [T]) async throws where T : Identifiable {
        for entity in entities {
            try await save(entity)
        }
    }
    
    func delete<T>(_ entity: T) async throws where T : Identifiable {
        if shouldFailDelete {
            throw AppError.deleteFailed("Mock delete error")
        }
        
        if let payslip = entity as? PayslipItem {
            payslips.removeAll { $0.id == payslip.id }
        }
    }
    
    func deleteBatch<T>(_ entities: [T]) async throws where T : Identifiable {
        for entity in entities {
            try await delete(entity)
        }
    }
    
    func clearAllData() async throws {
        payslips.removeAll()
    }
}